import os
import json
import openai
from getpass import getpass

# Load OpenAI API key from environment variable
openai.api_key = os.getenv("OPENAI_API_KEY")

# Ensure the student data directory exists
STUDENT_DATA_DIR = "student_data"
os.makedirs(STUDENT_DATA_DIR, exist_ok=True)

def register_student():
    print("\n--- Register ---")
    username = input("Enter a username: ")
    password = getpass("Enter a password: ")
    name = input("Enter your full name: ")
    age = input("Enter your age: ")
    student_id = input("Enter your ID number: ")
    country = input("Enter your country: ")

    # Save student information
    student_file = os.path.join(STUDENT_DATA_DIR, f"{username}.json")
    if os.path.exists(student_file):
        print("Username already exists! Please log in.")
        return

    student_data = {
        "password": password,
        "name": name,
        "age": age,
        "id": student_id,
        "country": country,
        "subjects": {}
    }

    with open(student_file, "w") as f:
        json.dump(student_data, f)

    print("Registration successful!")

def login_student():
    print("\n--- Login ---")
    username = input("Enter your username: ")
    password = getpass("Enter your password: ")

    student_file = os.path.join(STUDENT_DATA_DIR, f"{username}.json")
    if not os.path.exists(student_file):
        print("Invalid username or password!")
        return None

    with open(student_file, "r") as f:
        student_data = json.load(f)

    if student_data["password"] != password:
        print("Invalid username or password!")
        return None

    print("Login successful!")
    return username, student_data

def generate_questions(subject, age):
    """
    Generate placement test questions using OpenAI ChatGPT API.

    Args:
        subject (str): The selected subject.
        age (str): The student's age.

    Returns:
        list: List of questions generated by ChatGPT.
    """
    prompt = (
        f"Create a placement test for a {age}-year-old student in the subject '{subject}'. "
        "The test should have 5 multiple-choice questions with 4 options each."
    )
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        questions = response["choices"][0]["message"]["content"]
        return questions
    except Exception as e:
        print(f"Error while generating questions: {e}")
        return []

def choose_subject(username, student_data):
    print("\n--- Subjects ---")
    subjects = ["Physics", "Mathematics", "English", "Python programming", "Biology"]
    for i, subject in enumerate(subjects, start=1):
        print(f"{i}. {subject}")

    choice = int(input("Choose a subject (number): "))
    selected_subject = subjects[choice - 1]

    # Generate placement test
    print(f"\nStarting placement test for {selected_subject}...")
    questions = generate_questions(selected_subject, student_data["age"])
    if not questions:
        print("Could not generate questions. Please try again later.")
        return

    print("\n--- Placement Test ---")
    print(questions)  # Display questions (for now, no scoring logic is implemented)

    # Save subject data
    student_data["subjects"][selected_subject] = {
        "placement_test": questions,
        "progress": []
    }
    student_file = os.path.join(STUDENT_DATA_DIR, f"{username}.json")
    with open(student_file, "w") as f:
        json.dump(student_data, f)

    print(f"Placement test for {selected_subject} saved.")

def main():
    while True:
        print("\n--- School Application ---")
        print("1. Register")
        print("2. Login")
        print("3. Exit")
        choice = input("Enter your choice: ")

        if choice == "1":
            register_student()
        elif choice == "2":
            user = login_student()
            if user:
                username, student_data = user
                choose_subject(username, student_data)
        elif choice == "3":
            print("Goodbye!")
            break
        else:
            print("Invalid choice! Please try again.")

if __name__ == "__main__":
    main()

